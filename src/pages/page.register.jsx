// src/pages/page.register.jsx
import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import "../css/pages/page.auth.css";
import UI_Input from "../ui/ui.input";
import UI_OTP_Field from "../ui/ui.otp_field";
import { useNavigate } from "react-router-dom";
import { validateUzbekPhone, normalizePhone } from "../utils/validate.phone"; // ‚úÖ
import { Select } from "antd";
import { useContext } from "react";
import { UserContext } from "../context/user.context";

import {
  POST_SendSMSCode,
  POST_Register,
  POST_VerifyCode,
} from "../services/api.service";
// 
import { LocalService } from "../services/local.service"; // ‚úÖ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å



// 
const steps = {
  PHONE: 1,
  OTP: 2,
  PROFILE: 3,
};

const PageRegister = () => {
  const { setUser } = useContext(UserContext);
  const navigate = useNavigate();
  const [step, setStep] = useState(steps.PHONE);

const [formData, setFormData] = useState({
  phone: "",
  otp: "",
  fullName: "",
  password: "",
  language: "uz", // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  createdAt: "",
});

  const [errors, setErrors] = useState({});
  const [otpIsValid, setOtpIsValid] = useState(undefined);

  const handleChange = (name, value) => {
    setFormData((prev) => ({ ...prev, [name]: value }));

    // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    setErrors((prev) => {
      const newErrors = { ...prev };
      delete newErrors[name];
      return newErrors;
    });
  };

  const validatePhone = () => {
    const error = validateUzbekPhone(formData.phone); // ‚úÖ
    return error ? { phone: error } : {};
  };

const handleSubmitPhone = async (e) => {
  e.preventDefault();
  const validationErrors = validatePhone();
  if (Object.keys(validationErrors).length > 0) {
    setErrors(validationErrors);
    return;
  }

  try {
    const phone = normalizePhone(formData.phone);
    const response = await POST_SendSMSCode({ phone });

    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª detail ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ alert, toast, –∏ —Ç.–¥.)
    if (response?.data?.detail) {
      console.log("‚úÖ", response.data.detail);
    }

    setStep(steps.OTP);
  } catch (err) {
    const detail = err?.response?.data?.detail;

    if (detail) {
      setErrors({ phone: detail }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –ø–æ–¥ –ø–æ–ª–µ–º
    } else {
      setErrors({ phone: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ." });
    }
  }
};


  const handleOTPComplete = async (code) => {
    setFormData((prev) => ({ ...prev, otp: code }));

    try {
      const phone = normalizePhone(formData.phone); // ‚úÖ
      await POST_VerifyCode({ phone, code });

      setOtpIsValid(true);
      setTimeout(() => {
        setFormData((prev) => ({
          ...prev,
          createdAt: new Date().toISOString(),
        }));
        setStep(steps.PROFILE);
        setOtpIsValid(undefined);
      }, 300);
    } catch (err) {
      const errorList = err?.response?.data?.non_field_errors;
      if (errorList?.[0]) {
        setErrors((prev) => ({ ...prev, otp: errorList[0] }));
      }
      setOtpIsValid(false);
    }
  };

const [userData, setUserData] = useState(null); // ‚¨ÖÔ∏è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

const handleSubmitProfile = async () => {
  const requiredFields = ["fullName", "password", "language"];
  const validationErrors = {};

  requiredFields.forEach((field) => {
    if (!formData[field]) validationErrors[field] = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ";
  });

  if (Object.keys(validationErrors).length > 0) {
    setErrors(validationErrors);
    return;
  }

  try {
    const phone = normalizePhone(formData.phone);
    const res = await POST_Register({
      name: formData.fullName,
      phone: `+${phone}`,
      password: formData.password,
      language: formData.language,
      code: formData.otp,
    });

    // ‚¨áÔ∏è –ó–∞–º–µ–Ω–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ context
    setUser(res.data);

    // ‚¨áÔ∏è –£–±–∏—Ä–∞–µ–º LocalService.setUser (–æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ setUser)
    // LocalService.setUser(res.data);

    setUserData(res.data.user);
    navigate("/panel");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err?.response?.data || err);
    const msg = err?.response?.data?.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.";
    setErrors({ password: msg });
  }
};




useEffect(() => {
  if (userData) {
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log("üîé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", userData.user || userData);
  }
}, [userData]);


  const formVariants = {
    initial: { opacity: 0, x: 30 },
    animate: { opacity: 1, x: 0 },
    exit: { opacity: 0, x: -30 },
    transition: { duration: 0.3 },
  };

  return (
    <section className="page_auth page_register">
      <div className="wrap">
        <form className="form" onSubmit={handleSubmitPhone}>
          <div className="form_header">
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ OTP –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.</p>
          </div>

          <AnimatePresence mode="wait">
            {step === steps.PHONE && (
              <motion.div key="phone" {...formVariants} className="step step_1">
                <div className="step_content">
                  <span>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</span>
                  <UI_Input
                    type="phone"
                    placeholder="998 (XX) XXX-XX-XX" // ‚úÖ –±–µ–∑ –ø–ª—é—Å–∞
                    name="phone"
                    value={formData.phone}
                    onChange={(value) => handleChange("phone", value)}
                  />
                  {errors.phone && <div className="error">{errors.phone}</div>}
                </div>

                <div className="form_footer">
                  <button type="submit" className="btn_submit">
                    –î–∞–ª–µ–µ
                  </button>
                </div>
              </motion.div>
            )}

            {step === steps.OTP && (
              <motion.div key="otp" {...formVariants} className="step step_2">
                <div className="step_content">
                  <span>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</span>
                  <UI_OTP_Field
                    length={6}
                    onChange={(code) => {
                      handleChange("otp", code);
                      if (otpIsValid === false) setOtpIsValid(undefined);
                    }}
                    onComplete={handleOTPComplete}
                    isValid={otpIsValid}
                  />
                  {otpIsValid === false && (
                    <div className="error">–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</div>
                  )}
                </div>

                <div className="form_footer">
                  <button
                    type="button"
                    className="btn_submit"
                    onClick={() => setStep(steps.PHONE)}
                  >
                    –ù–∞–∑–∞–¥
                  </button>
                </div>
              </motion.div>
            )}

            {step === steps.PROFILE && (
              <motion.div key="profile" {...formVariants} className="step step_3">
                <div className="step_content">
                  <div className="row">
                    <span>–ò–º—è –ü—Ä–æ—Ñ–∏–ª—è</span>
                    <UI_Input
                      type="text"
                      placeholder="–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è"
                      value={formData.fullName}
                      onChange={(value) => handleChange("fullName", value)}
                    />
                    {errors.fullName && <div className="error">{errors.fullName}</div>}
                  </div>

                  <div className="row">
                    <span>–ü–∞—Ä–æ–ª—å</span>
                    <UI_Input
                      type="password"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                      value={formData.password}
                      onChange={(value) => handleChange("password", value)}
                    />
                    {errors.password && <div className="error">{errors.password}</div>}
                  </div>

                  <div className="row">
                    <span>–Ø–∑—ã–∫</span>
                    <Select
                      defaultValue={formData.language}
                      style={{ width: "100%" }}
                      onChange={(value) => handleChange("language", value)}
                      options={[
                        { label: "–†—É—Å—Å–∫–∏–π", value: "ru" },
                        { label: "O‚Äòzbek", value: "uz" },
                        { label: "English", value: "en" },
                      ]}
                      size="large"
                    />
                    {errors.language && <div className="error">{errors.language}</div>}
                  </div>
                </div>

                <div className="form_footer">
                  <button
                    type="button"
                    className="btn_submit"
                    onClick={handleSubmitProfile}
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å
                  </button>
                </div>
              </motion.div>
              )}

          </AnimatePresence>
        </form>
      </div>
    </section>
  );
};

export default PageRegister;
