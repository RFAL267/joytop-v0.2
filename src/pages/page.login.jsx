import React, { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import "../css/pages/page.auth.css";

import UI_Input from "../ui/ui.input";
import { validateUzbekPhone, normalizePhone } from "../utils/validate.phone";
import { POST_Login } from "../services/api.service";
import { UserContext } from "../context/user.context"; // üëà –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

const PageLogin = () => {
  const navigate = useNavigate();
  const { setUser } = useContext(UserContext); // üëà –ü–æ–ª—É—á–∞–µ–º setUser –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  const [formData, setFormData] = useState({
    phone: "",
    password: "",
  });

  const [errors, setErrors] = useState({});

  const handleChange = (name, value) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    setErrors((prev) => {
      const newErrors = { ...prev };
      delete newErrors[name];
      return newErrors;
    });
  };

  const validate = () => {
    const newErrors = {};

    const phoneError = validateUzbekPhone(formData.phone);
    if (phoneError) newErrors.phone = phoneError;

    if (!formData.password.trim()) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    }

    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    try {
      const phone = normalizePhone(formData.phone);
      const res = await POST_Login({
        phone: `+${phone}`,
        password: formData.password,
      });

      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      setUser(res.data);
      console.log(res.data);
      

      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
      navigate("/panel");
    } catch (err) {
      const msg =
        err?.response?.data?.detail ||
        "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";

      setErrors({ password: msg });
    }
  };

  return (
    <section className="page_auth page_login">
      <div className="wrap">
        <form className="form" onSubmit={handleSubmit}>
          <div className="form_header">
            <h2>–í—Ö–æ–¥</h2>
            <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.</p>
          </div>

          <div className="row">
            <span>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</span>
            <UI_Input
              type="phone"
              placeholder="998 (XX) XXX-XX-XX"
              name="phone"
              value={formData.phone}
              onChange={(value) => handleChange("phone", value)}
            />
            {errors.phone && <div className="error">{errors.phone}</div>}
          </div>

          <div className="row">
            <span>–ü–∞—Ä–æ–ª—å</span>
            <UI_Input
              type="password"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              name="password"
              value={formData.password}
              onChange={(value) => handleChange("password", value)}
            />
            {errors.password && <div className="error">{errors.password}</div>}
          </div>

          <div className="form_footer">
            <button type="submit" className="btn_submit">
              –í–æ–π—Ç–∏
            </button>
          </div>
        </form>
      </div>
    </section>
  );
};

export default PageLogin;
